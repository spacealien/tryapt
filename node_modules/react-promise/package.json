{
  "_args": [
    [
      {
        "raw": "react-promise@^1.1.2",
        "scope": null,
        "escapedName": "react-promise",
        "name": "react-promise",
        "rawSpec": "^1.1.2",
        "spec": ">=1.1.2 <2.0.0",
        "type": "range"
      },
      "C:\\xampp\\htdocs\\tryapt"
    ]
  ],
  "_from": "react-promise@>=1.1.2 <2.0.0",
  "_id": "react-promise@1.1.2",
  "_inCache": true,
  "_location": "/react-promise",
  "_nodeVersion": "6.3.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/react-promise-1.1.2.tgz_1472980178098_0.6850296354386955"
  },
  "_npmUser": {
    "name": "capaj",
    "email": "capajj@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-promise@^1.1.2",
    "scope": null,
    "escapedName": "react-promise",
    "name": "react-promise",
    "rawSpec": "^1.1.2",
    "spec": ">=1.1.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-promise/-/react-promise-1.1.2.tgz",
  "_shasum": "2c3b9d31152669c3bdaac371777efe9a05441daa",
  "_shrinkwrap": null,
  "_spec": "react-promise@^1.1.2",
  "_where": "C:\\xampp\\htdocs\\tryapt",
  "author": {
    "name": "capajj@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/capaj/react-async/issues"
  },
  "dependencies": {},
  "description": "react.js component for dealing with promises",
  "devDependencies": {
    "babel-cli": "^6.14.0",
    "babel-core": "^6.14.0",
    "babel-loader": "^6.2.5",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-react": "^6.3.13",
    "babel-register": "^6.3.13",
    "chai": "^3.4.1",
    "cross-env": "^2.0.1",
    "enzyme": "^1.3.1",
    "husky": "^0.10.2",
    "mocha": "^2.3.4",
    "react": "^0.14.3",
    "react-addons-test-utils": "^0.14.3",
    "react-dom": "^0.14.3",
    "rimraf": "^2.5.4",
    "standard": "^5.4.1",
    "webpack": "^1.13.2"
  },
  "directories": {},
  "dist": {
    "shasum": "2c3b9d31152669c3bdaac371777efe9a05441daa",
    "tarball": "https://registry.npmjs.org/react-promise/-/react-promise-1.1.2.tgz"
  },
  "files": [
    "dist",
    "lib",
    "src"
  ],
  "gitHead": "5aaaab0618f813647af84cbb086f8324cff62c6d",
  "homepage": "https://github.com/capaj/react-async#readme",
  "jspm": {
    "format": "esm"
  },
  "keywords": [
    "react",
    "promise",
    "q"
  ],
  "license": "MIT",
  "main": "./lib/async.js",
  "maintainers": [
    {
      "name": "capaj",
      "email": "capajj@gmail.com"
    }
  ],
  "name": "react-promise",
  "optionalDependencies": {},
  "readme": "# react-promise [![NPM badge](https://nodei.co/npm/react-promise.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/react-promise/)\na react.js component for general promise - no need for statefull component just to render a value hidden behind a promise or for a simple form.\nLet's consider a trivial example: you have a promise such as this\n```javascript\nlet prom = new Promise(function (resolve, reject) {\n setTimeout(function () {\n   resolve('a value')\n }, 100)\n})\n```\n\nand you want to make a component, which renders out in it's body 'a value'. Without react-async, such component looks like this:\n```javascript\nclass ExampleWithoutAsync extends React.Component { // you can't use stateless component because you need a state\n  constructor () {\n    super()\n    this.state = {}\n    prom.then((value) => {\n      this.setState({val: value})\n    })\n  }\n  render () {\n    if (!this.state.val) return\n    return <div>{this.state.val}</div>\n  }\n```\n\nand with react-async:\n```javascript\nimport Async from 'react-promise'\n\nconst ExampleWithAsync = (props) => <Async promise={prom} then={(val) => <div>{val}</div>/>\n```\n\nMuch simpler, right?\n\nIn case you need user input before you can make the async call, there is a `before` property. Assign a function into it if you need to render a form for example.\n```javascript\n<Async before={(handlePromise) => {\n  return <form>\n    <input></input>\n    <button onClick={() => {\n      handlePromise(Promise.resolve('awesome data'))\n    }}>do something async like a POST request</button>\n  </form>\n}}\n/>\n```\nThe form is rendered before the promise is resolved. If you ever need to reset the Async to `before` after promise has resolved/rejected get the Async ref and use\n```javascript\nref.setState({started: false})\n```\n\n## install\n\nWith jspm:\n```\njspm i npm:react-promise\n```\nor with npm:\n```\nnpm i react-promise\n```\n\n## [Available props](https://github.com/capaj/react-async/blob/master/async.js#L48):\nAll props are optional\n\n- **promise** a promise you want to wait for\n- **before** if no promise is provided, Async will invoke this inside it's render method-use for forms and such\n- **then** runs when promise is resolved. Async will run function provided in it's render passing a resolved value as first parameter.\n- **catch** runs when promise is rejected. Async will run function provided in it's render passing an error as first parameter.\n- **pendingRender** is a node which will be outputted from Async render method while promise is pending. If none is provided, defaults to `<div/>`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/capaj/react-async.git"
  },
  "scripts": {
    "build": "npm run build:lib && npm run build:umd && npm run build:umd:min",
    "build:lib": "babel src --out-dir lib",
    "build:umd": "cross-env NODE_ENV=development webpack src/async.js dist/async.js",
    "build:umd:min": "cross-env NODE_ENV=production webpack src/async.js dist/async.min.js",
    "clean": "rimraf lib dist",
    "precommit": "npm test",
    "prepublish": "npm run clean && npm run build",
    "pretest": "standard",
    "test": "node run-tests"
  },
  "version": "1.1.2"
}
